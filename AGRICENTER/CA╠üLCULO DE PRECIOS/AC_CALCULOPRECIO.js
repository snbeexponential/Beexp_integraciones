/**
 * @author Saul Navarro <saul.navarro@beexponential.com.mx>
 * @Name AC_CS_CALCULOPRECIOS.js
 * @description Script para cálculo de precios e impuestoe en Estimación y Pedidos.
 * @NApiVersion 2.0
 * @NScriptType ClientScript
 */

 define(['N/search','N/record','N/ui/dialog'], function(search, record, dialog) {

   const entry_point = {
      
      postSourcing: null,
      lineInit: null,
      pageInit: null,
      saveRecord: null,
      sublistChanged: null,
      validateDelete: null,
      validateField: null,
      validateInsert: null,
      validateLine: null,

   };
   

   
     entry_point.pageInit= function(context) {

   }
   entry_point.postSourcing = function (context) {// se ejecuta despues de modificar un campo  
      //console.log('fieldChange context', context);
      var currentRecord = context.currentRecord;
      console.log('context Current Record',currentRecord );
      var type = context.sublistId;
      var name = context.fieldId;

      /*if ((type == 'item') && (name == 'item')) {
           alert("column has changed");
       }*/
       var subList = currentRecord.getSublist({
           sublistId: 'item'
       });

       var numLines = currentRecord.getLineCount({
           sublistId: 'item'
       });

       var currIndex = currentRecord.getCurrentSublistIndex({
           sublistId: 'item'
       });

       if ((type == 'item') && (name == 'item')) {
           //var descuentoAplicado2 = 10;

           /*for(var i = 0; i < numLines; i++) {
               descuentoAplicado = currentRecord.getSublistValue({
                   sublistId: name,
                   fieldId: 'custcol_beex_az_descuentoap',
                   line: i
               });

               currentRecord.setSublistValue({
                   sublistId: name,
                   fieldId: 'custcol_bex_az_preciominimo',
                   value: descuentoAplicado,
                   ignoreFieldChange: true
               });
           }*/

           currentRecord.setValue({sublistId: name, fieldId: 'custcol_beex_az_artdescuento', value: 1000});
           var descuentoAplicado = currentRecord.getCurrentSublistValue({sublistId: name, fieldId: 'rate'}); 

           console.log('value', descuentoAplicado);

           currentRecord.setCurrentSublistValue({
               sublistId: name,
               fieldId: 'custcol_bex_az_preciominimo',
               value: descuentoAplicado,
               ignoreFieldChange: true
           });
       }

       /*for(var i = 0; i < numLines; i++) {

       }*/

   }//end fieldChanged

   entry_point.lineInit = function (context) {// se ejecuta al agregar una nueva linea a una sublista
      // Autogenerated, do not edit. All changes will be undone.  
      console.log('lineInit context', context);
   }//end lineInit

   entry_point.pageInit = function (context) {// se ejecuta justo al terminar de carga la pagina de algun record
      // Autogenerated, do not edit. All changes will be undone. 
      console.log('pageInit context', context);
      context.currentRecord.setValue({
         fieldId: 'memo',
         value: 'Linea inicializada',
         ignoreFieldChange: true
      });
   }//end pageInit

   entry_point.saveRecord = function (context) {// se ejecuta cuando el usuario da clic al boton Guardar, sino no devuelve true, no deja guardar
      // Autogenerated, do not edit. All changes will be undone.  
      console.log('saveRecord context', context);
      return false;
   }//end saveRecord

   entry_point.sublistChanged = function (context) {// se ejecuta cuando una sublista se modifica
      // Autogenerated, do not edit. All changes will be undone.  
      console.log('sublistChanged context', context)
   }//end sublistChanged

   entry_point.validateDelete = function (context) {// se ejecuta cuando se intenta eliminar una linea, si no devuelve true, no deja eliminar dicha linea
      // Autogenerated, do not edit. All changes will be undone.
      console.log('validateDelete context', context);
      return true;
   }//end validateDelete

   entry_point.validateField = function (context) {// igual que el fieldChange, con la diferencia que si no devuelve true, regresa el focus al campo que se trato de modificar
      // Autogenerated, do not edit. All changes will be undone.  
      console.log('validateField context', context);
      return true;
   }//end validateField

   entry_point.validateInsert = function (context) {// se ejecuta cuando se intenta agregar una linea, si no devuelve true, no deja agregar la linea
      // Autogenerated, do not edit. All changes will be undone.  
      console.log('validateInsert context', context);
      return true;
   }//end validateInsert

   entry_point.validateLine = function (context) {// se ejecuta cuando se intenta modificar una linea, si no devuelve true, no deja modificar la linea
      // Autogenerated, do not edit. All changes will be undone.  
      console.log('validateLine context', context);
      return true;
   }//end validateLine

   return entry_point;

 
   
});